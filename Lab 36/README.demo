# Falco for syscall and process behavioral analytics at host & container level

# Create clusters
kind create cluster --config cluster.yaml

# Install falco in the worker node
docker exec -it kind-worker bash
apt update
apt install docker.io sudo -y
sudo systemctl start docker
sudo docker run --rm -i -t --name falco --privileged  \
    -v /var/run/docker.sock:/host/var/run/docker.sock \
    -v /dev:/host/dev -v /proc:/host/proc:ro -v /boot:/host/boot:ro \
    -v /lib/modules:/host/lib/modules:ro -v /usr:/host/usr:ro -v /etc:/host/etc:ro \
    falcosecurity/falco:0.38.2 

# Create a secret and a pod using the secret as an env
kubectl create secret generic backend-user --from-literal=username='backend-admin'
kubectl run apache --image httpd -o yaml --dry-run=client > pod.yaml
kubectl apply -f pod.yaml

# Trigger an event in Falco
kubectl exec -it apache -- bash

# Exec into the worker node
Notice the event flagged in Falco.

# Open a new terminal into the worker node and exec into the Falco containetr to view existing falco rules about a shell spawned
docker exec -it falco bash
apt update
apt install vim nano -y
cd /etc/falco
vi falco_rules.yaml | grep spawned

Search using /
/A shell was spawned

Copy the rule:
```
- rule: Terminal shell in container
  desc: >
    A shell was used as the entrypoint/exec point into a container with an attached terminal. Parent process may have
    legitimately already exited and be null (read container_entrypoint macro). Common when using "kubectl exec" in Kubernetes.
    Correlate with k8saudit exec logs if possible to find user or serviceaccount token used (fuzzy correlation by namespace and pod name).
    Rather than considering it a standalone rule, it may be best used as generic auditing rule while examining other triggered
    rules in this container/tty.
  condition: >
    spawned_process 
    and container
    and shell_procs
    and proc.tty != 0
    and container_entrypoint 
    and not user_expected_terminal_shell_in_container_conditions
  output: A shell was spawned in a container with an attached terminal (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)
  priority: NOTICE 
  tags: [maturity_stable, container, shell, mitre_execution, T1059]
 ```
 
# Edit falco rules local file and paste the rule. Change priority to WARNING
nano falco_rules.local.yaml

# Trigger an event in Falco
kubectl exec -it apache -- bash

# Exec into the worker node
Notice the event flagged in Falco is now "Warning"

# Delete cluster
kind delete cluster
